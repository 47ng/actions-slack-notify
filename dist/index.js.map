{"version":3,"file":"index.js","sources":["../webpack://actions-slack-notify/./lib/gha.js","../webpack://actions-slack-notify/./lib/main.js","../webpack://actions-slack-notify/./lib/slack.js","../webpack://actions-slack-notify/./node_modules/@actions/core/lib/command.js","../webpack://actions-slack-notify/./node_modules/@actions/core/lib/core.js","../webpack://actions-slack-notify/./node_modules/@actions/core/lib/file-command.js","../webpack://actions-slack-notify/./node_modules/@actions/core/lib/utils.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/bits/attachment.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/bits/base/bit.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/bits/base/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/bits/confirmation-dialog.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/bits/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/bits/option-group.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/bits/option.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/actions.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/base/block.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/base/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/context.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/divider.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/file.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/header.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/image.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/input.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/blocks/section.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/base/action-element.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/base/confirmable-element.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/base/element.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/base/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/base/multiselect-element.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/base/select-element.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/base/selectable-element.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/button.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/channel-multiselect.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/channel-select.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/checkboxes.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/conversations-multiselect.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/conversations-select.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/datepicker.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/external-multiselect.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/external-select.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/img.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/overflow-menu.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/radio-buttons.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/static-multiselect.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/static-select.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/text-input.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/time-picker.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/user-multiselect.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/elements/user-select.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/objects/base/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/objects/base/object-base.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/objects/dispatch-actions-configuration-object.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/objects/filter-object.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/objects/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/objects/markdown-object.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/objects/plain-text-object.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/surfaces/base/advanced-surface.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/surfaces/base/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/surfaces/base/surface.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/surfaces/home-tab.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/surfaces/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/surfaces/message.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/surfaces/modal.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/constants/categories.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/constants/classes.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/constants/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/constants/param-map.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/constants/props.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/constants/types.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/constants/values.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/exception/block-builder-error.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/exception/block-builder-validation-error.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/exception/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/helpers/builder-helper.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/helpers/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/helpers/validation-helper.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/lib/builder.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/lib/index.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/lib/slack-dto.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/lib/validator.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/validators/default-type-rules.js","../webpack://actions-slack-notify/./node_modules/slack-block-builder/src/utility/validators/type-validators.js","../webpack://actions-slack-notify/external \"fs\"","../webpack://actions-slack-notify/external \"os\"","../webpack://actions-slack-notify/external \"path\"","../webpack://actions-slack-notify/webpack/bootstrap","../webpack://actions-slack-notify/webpack/runtime/compat","../webpack://actions-slack-notify/webpack/startup"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getURLs = exports.getRefContext = exports.getTag = exports.getBranch = exports.getPRNumber = void 0;\n// --\nconst PR_REF_REGEX = /^refs\\/pull\\/(\\d+)\\/merge$/;\nconst BRANCH_REF_REGEX = /^refs\\/heads\\/(.+)$/;\nconst TAG_REF_REGEX = /^refs\\/tags\\/(.+)$/;\n// --\nfunction getPRNumber(ref) {\n    const match = ref.match(PR_REF_REGEX);\n    if (!match)\n        return undefined;\n    return parseInt(match[1]);\n}\nexports.getPRNumber = getPRNumber;\n// --\nfunction getBranch(ref) {\n    const match = ref.match(BRANCH_REF_REGEX);\n    if (!match)\n        return undefined;\n    return match[1];\n}\nexports.getBranch = getBranch;\n// --\nfunction getTag(ref) {\n    const match = ref.match(TAG_REF_REGEX);\n    if (!match)\n        return undefined;\n    return match[1];\n}\nexports.getTag = getTag;\n// --\nfunction getRefContext(ref) {\n    const pr = getPRNumber(ref);\n    if (pr) {\n        return `PR *#${pr}*`;\n    }\n    const tag = getTag(ref);\n    if (tag) {\n        return `tag *${tag}*`;\n    }\n    const branch = getBranch(ref);\n    if (branch) {\n        return `branch *${branch}*`;\n    }\n    return `*${ref}*`;\n}\nexports.getRefContext = getRefContext;\n// --\nfunction getURLs({ GITHUB_REPOSITORY, GITHUB_SHA, GITHUB_REF, GITHUB_SERVER_URL = 'https://github.com', GITHUB_RUN_ID }) {\n    const prNumber = getPRNumber(GITHUB_REF);\n    return {\n        repo: `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}`,\n        commit: `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}`,\n        run: `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}`,\n        pr: prNumber\n            ? `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/pull/${prNumber}`\n            : undefined\n    };\n}\nexports.getURLs = getURLs;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core = __importStar(require(\"@actions/core\"));\nconst slack_1 = require(\"./slack\");\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const status = core.getInput('status');\n            const env = process.env;\n            if (status === 'success') {\n                const msg = slack_1.success(env);\n                core.debug(msg);\n            }\n            else if (status === 'failure') {\n                const msg = slack_1.failure(env, JSON.parse(core.getInput('steps')));\n                core.debug(msg);\n            }\n        }\n        catch (error) {\n            core.setFailed(error.message);\n        }\n    });\n}\nrun();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getActions = exports.getContext = exports.failure = exports.success = void 0;\nconst slack_block_builder_1 = require(\"slack-block-builder\");\nconst gha_1 = require(\"./gha\");\nfunction success(env) {\n    const { GITHUB_WORKFLOW, GITHUB_REPOSITORY } = env;\n    const urls = gha_1.getURLs(env);\n    const msg = slack_block_builder_1.Message().blocks(slack_block_builder_1.Blocks.Section({\n        text: `*✔︎ ${GITHUB_WORKFLOW}* passed on <${urls.repo}|*${GITHUB_REPOSITORY}*>`\n    }));\n    const context = getContext(env);\n    const actions = getActions(env, 'failure');\n    msg.blocks([context, actions]);\n    msg.printPreviewUrl();\n    return msg.buildToJSON();\n}\nexports.success = success;\n// --\nfunction failure(env, steps) {\n    const { GITHUB_WORKFLOW, GITHUB_REPOSITORY } = env;\n    const urls = gha_1.getURLs(env);\n    const failedStepIDs = Object.entries(steps)\n        .filter(({ 1: step }) => !step.success)\n        .map(([id]) => id);\n    const msg = slack_block_builder_1.Message().blocks([\n        slack_block_builder_1.Blocks.Section({\n            text: `*🚨 ${GITHUB_WORKFLOW}* failed on <${urls.repo}|*${GITHUB_REPOSITORY}*>`\n        })\n    ]);\n    if (failedStepIDs.length > 0) {\n        msg.blocks(slack_block_builder_1.Blocks.Section().text(failedStepIDs.map(id => `*✘ ${id}*`).join('\\n')));\n    }\n    const context = getContext(env);\n    const actions = getActions(env, 'failure');\n    msg.blocks([context, actions]);\n    msg.printPreviewUrl();\n    return msg.buildToJSON();\n}\nexports.failure = failure;\n// --\nfunction getContext(env) {\n    const urls = gha_1.getURLs(env);\n    const shortSha = env.GITHUB_SHA.slice(0, 8);\n    return slack_block_builder_1.Blocks.Context().elements([\n        `From <${urls.commit}|\\`${shortSha}\\`> on ${gha_1.getRefContext(env.GITHUB_REF)}`,\n        `Triggered by *${env.GITHUB_EVENT_NAME}*`\n        // ...(duration ? [`Took *${duration}*`] : [])\n    ]);\n}\nexports.getContext = getContext;\n// --\nfunction getActions(env, status) {\n    const urls = gha_1.getURLs(env);\n    const viewWorkflowButton = slack_block_builder_1.Elements.Button({\n        text: 'View Workflow',\n        url: urls.run\n    });\n    const actions = slack_block_builder_1.Blocks.Actions().elements(status === 'failure'\n        ? viewWorkflowButton.danger()\n        : viewWorkflowButton.end());\n    if (urls.pr !== undefined) {\n        const prNumber = gha_1.getPRNumber(env.GITHUB_REF);\n        actions.elements(slack_block_builder_1.Elements.Button({\n            text: `View Pull Request #${prNumber}`,\n            url: urls.pr\n        }));\n    }\n    return actions;\n}\nexports.getActions = getActions;\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.  The value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n */\nfunction error(message) {\n    command_1.issue('error', message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds an warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n */\nfunction warning(message) {\n    command_1.issue('warning', message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n//# sourceMappingURL=utils.js.map","const { Bit } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { props } = require('../utility/constants');\n\nclass AttachmentDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.color = params.color;\n    this.fallback = params.fallback;\n    this.blocks = params.blocks;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Attachment extends Bit {\n  constructor(params = {}) {\n    super();\n\n    this.props.color = params.color;\n    this.props.fallback = params.fallback;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the color of the border to the left of the block quote for the Attachment\n   *\n   * {@link https://api.slack.com/reference/messaging/attachments|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  color(string) {\n    return this.set(string, props.color);\n  }\n\n  /**\n   * Sets the plain text summary of the attachment used in clients that don't show formatted text (eg. IRC, mobile notifications).\n   *\n   * {@link https://api.slack.com/reference/messaging/attachments|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  fallback(string) {\n    return this.set(string, props.fallback);\n  }\n\n  /**\n   * Adds Blocks to the Attachment object\n   *\n   * {@link https://api.slack.com/reference/messaging/attachments|View in Slack API Documentation}\n   *\n   * @param {...Block|Array<Block>} blocks Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  blocks(...blocks) {\n    return this.append(blocks.flat(), props.blocks);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      blocks: BuilderHelper.getBuilderResults(this.props.blocks),\n    };\n\n    return this.getResult(AttachmentDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  Attachment,\n  AttachmentDto,\n};\n","const { Builder } = require('../../utility/lib');\nconst { categories } = require('../../utility/constants');\n\nclass Bit extends Builder {\n  constructor() {\n    super();\n\n    this.category = categories.bit;\n  }\n\n  /**\n   * Performs no alterations to the object. Meant to simulate a closing\n   * HTML tag for those who prefer the look of such code.\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  end() {\n    return this;\n  }\n}\n\nmodule.exports = Bit;\n","const Bit = require('./bit');\n\nmodule.exports = {\n  Bit,\n};\n","const { Bit } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { props, enumValues } = require('../utility/constants');\n\nclass ConfirmationDialogDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.title = params.title;\n    this.text = params.text;\n    this.confirm = params.confirm;\n    this.deny = params.deny;\n    this.style = params.style;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass ConfirmationDialog extends Bit {\n  constructor(params = {}) {\n    super();\n\n    this.props.title = params.title;\n    this.props.text = params.text;\n    this.props.confirm = params.confirm;\n    this.props.deny = params.deny;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the title displayed in the confirmation dialog\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 100 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#confirm|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  title(string) {\n    return this.set(string, props.title);\n  }\n\n  /**\n   * Sets the textual content of the confirmation dialog\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 300 characters\n   *    * Supports markdown\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#confirm|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  text(string) {\n    return this.set(string, props.text);\n  }\n\n  /**\n   * Sets the copy for the button that confirms the action.\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 30 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#confirm|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  confirm(string) {\n    return this.set(string, props.confirm);\n  }\n\n  /**\n   * Sets the copy for the button that cancels the action.\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 30 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#confirm|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  deny(string) {\n    return this.set(string, props.deny);\n  }\n\n  /**\n   * Sets the 'style' parameter to 'primary', making the\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#confirm|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  primary() {\n    return this.set(enumValues.primary, props.style);\n  }\n\n  /**\n   * Sets 'style' parameter to 'danger'\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#confirm|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  danger() {\n    return this.set(enumValues.danger, props.style);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      text: BuilderHelper.getMarkdownObject(this.props.text),\n      title: BuilderHelper.getPlainTextObject(this.props.title),\n      confirm: BuilderHelper.getPlainTextObject(this.props.confirm),\n      deny: BuilderHelper.getPlainTextObject(this.props.deny),\n    };\n\n    return this.getResult(ConfirmationDialogDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  ConfirmationDialogDto,\n  ConfirmationDialog,\n};\n","const { ConfirmationDialog, ConfirmationDialogDto } = require('./confirmation-dialog');\nconst { Option, OptionDto } = require('./option');\nconst { OptionGroup, OptionGroupDto } = require('./option-group');\nconst { Attachment, AttachmentDto } = require('./attachment');\n\nconst BitDto = {\n  ConfirmationDialogDto,\n  OptionDto,\n  OptionGroupDto,\n  AttachmentDto,\n};\n\nconst getBits = (config) => {\n  const getInstance = (Class, params) => new Class(params, config);\n\n  return {\n\n    /**\n     * Creates and returns a ConfirmationDialog Bit\n     *\n     * {@link https://api.slack.com/reference/block-kit/composition-objects#confirm|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.title] Sets the title displayed in the confirmation dialog\n     * @param {string} [params.text] Sets the textual content of the confirmation dialog\n     * @param {string} [params.confirm] Sets the text for the button that confirms the action.\n     * @param {string} [params.deny]Sets the text for the button that cancels the action.\n     * @return {ConfirmationDialog} An instance of ConfirmationDialog\n     */\n\n    ConfirmationDialog: (params) => getInstance(ConfirmationDialog, params),\n\n    /**\n     * Creates and returns an Option Bit\n     *\n     * {@link https://api.slack.com/reference/block-kit/composition-objects#option|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.text] Sets the text displayed in the menu for the current Option\n     * @param {string} [params.value] Sets the value passed to your app when this Option is clicked or submitted\n     * @param {string} [params.description] Sets a description shown next to the Option in a RadioButton Element\n     * @param {string} [params.url] Sets the URL to redirect the user to when this Option is clicked (in an OverflowMenu)\n     * @return {Option} An instance of Option\n     */\n\n    Option: (params) => getInstance(Option, params),\n\n    /**\n     * Creates and returns an OptionGroup Bit\n     *\n     * {@link https://api.slack.com/reference/block-kit/composition-objects#option_group|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.label] Sets the label shown above the group of Options\n     * @return {OptionGroup} An instance of OptionsGroup\n     */\n\n    OptionGroup: (params) => getInstance(OptionGroup, params),\n\n    /**\n     * Creates and returns an Attachment Bit that can be attached to Message objects\n     *\n     * {@link https://api.slack.com/reference/messaging/attachments|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.color] Sets the color of the block quote border\n     * @return {Attachment} An instance of Attachment\n     */\n\n    Attachment: (params) => getInstance(Attachment, params),\n  };\n};\n\nmodule.exports = {\n  ConfirmationDialog,\n  Option,\n  OptionGroup,\n  Attachment,\n  BitDto,\n  getBits,\n};\n","const { Bit } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { props } = require('../utility/constants');\n\nclass OptionGroupDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.label = params.label;\n    this.options = params.options;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass OptionGroup extends Bit {\n  constructor(params = {}) {\n    super();\n\n    this.props.label = params.label;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the label shown above the group of Options\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 75 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#option_group|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  label(string) {\n    return this.set(string, props.label);\n  }\n\n  /**\n   * Sets the Options displayed in this OptionGroup\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 100 Options\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#option_group|View in Slack API Documentation}\n   *\n   * @param {...Option|Array<Option>} options Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  options(...options) {\n    return this.append(options.flat(), props.options);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      label: BuilderHelper.getPlainTextObject(this.props.label),\n      options: BuilderHelper.getBuilderResults(this.props.options),\n    };\n\n    return this.getResult(OptionGroupDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  OptionGroup,\n  OptionGroupDto,\n};\n","const { Bit } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { props } = require('../utility/constants');\n\nclass OptionDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.text = params.text;\n    this.value = params.value;\n    this.description = params.description;\n    this.url = params.url;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Option extends Bit {\n  constructor(params = {}) {\n    super();\n\n    this.props.text = params.text;\n    this.props.value = params.value;\n    this.props.description = params.description;\n    this.props.url = params.url;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the text displayed in the menu for the current Option\n   *\n   *    * **Required** ⚠\n   *    * Max 75 characters.\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#option|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  text(string) {\n    return this.set(string, props.text);\n  }\n\n  /**\n   * Sets the value passed to your app when this Option is clicked or submitted\n   *\n   *    * **Required** ⚠\n   *    * Max 75 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#option|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  value(string) {\n    return this.set(string, props.value);\n  }\n\n  /**\n   * Sets a description shown next to the Option in a RadioButton Element\n   *\n   * **Slack Validation Rules:**\n   *    * Max 3000 characters\n   *    * Only available for RadioButtons ⚠\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#option|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  description(string) {\n    return this.set(string, props.description);\n  }\n\n  /**\n   * Sets the URL to redirect the user to when this Option is clicked (in an OverflowMenu)\n   *\n   * **Slack Validation Rules:**\n   *    * Max 3000 characters\n   *    * Only available for Options in an OverflowMenu ⚠\n   *\n   * {@link https://api.slack.com/reference/block-kit/composition-objects#option|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  url(string) {\n    return this.set(string, props.url);\n  }\n\n  /**\n   * @private\n   */\n\n  build({ isMarkdown } = { isMarkdown: false }) {\n    const augmentedProps = {\n      text: isMarkdown\n        ? BuilderHelper.getMarkdownObject(this.props.text)\n        : BuilderHelper.getPlainTextObject(this.props.text),\n      description: isMarkdown\n        ? BuilderHelper.getMarkdownObject(this.props.description)\n        : BuilderHelper.getPlainTextObject(this.props.description),\n    };\n\n    return this.getResult(OptionDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  Option,\n  OptionDto,\n};\n","const { Block } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass ActionsDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.blocks.actions;\n    this.elements = params.elements;\n    this.block_id = params.blockId;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Actions extends Block {\n  constructor(params = {}) {\n    super();\n\n    this.props.blockId = params.blockId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the interactive Elements of the Actions Block\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 5 Elements\n   *    * Supports Buttons, Selects, Overflows, and DatePickers\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#actions|View in Slack API Documentation}\n   *\n   * @param {...Element|Array<Element>} elements Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  elements(...elements) {\n    return this.append(elements.flat(), props.elements);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      elements: BuilderHelper.getBuilderResults(this.props.elements),\n    };\n\n    return this.getResult(ActionsDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  Actions,\n  ActionsDto,\n};\n","const { Builder } = require('../../utility/lib');\nconst { props, categories } = require('../../utility/constants');\n\nclass Block extends Builder {\n  constructor() {\n    super();\n\n    this.category = categories.block;\n  }\n\n  /**\n   * Sets a string to be an identifier for the block, that\n   * will be available in interaction payloads\n   *\n   * **Slack Validation Rules:**\n   *    * Max 255 characters\n   *    * Must be unique to the view\n   *    * If a Block changes, blockId property should change, too\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  blockId(string) {\n    return this.set(string, props.blockId);\n  }\n\n  /**\n   * Performs no alterations to the object. Meant to simulate a closing\n   * HTML tag for those who prefer the look of such code.\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  end() {\n    return this;\n  }\n}\nmodule.exports = Block;\n","const Block = require('./block');\n\nmodule.exports = {\n  Block,\n};\n","const { Block } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass ContextDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.blocks.context;\n    this.elements = params.elements;\n    this.block_id = params.blockId;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Context extends Block {\n  constructor(params = {}) {\n    super();\n\n    this.props.blockId = params.blockId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the interactive Elements of the Context block\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 10 Elements\n   *    * Supports strings and Image Elements\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#context|View in Slack API Documentation}\n   *\n   * @param {...(string|Img)|Array<(string|Img)>} elements Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  elements(...elements) {\n    return this.append(elements.flat(), props.elements);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      elements: BuilderHelper.getElementsForContext(this.props.elements),\n    };\n\n    return this.getResult(ContextDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  Context,\n  ContextDto,\n};\n","const { Block } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { types } = require('../utility/constants');\n\nclass DividerDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.blocks.divider;\n    this.block_id = params.blockId;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Divider extends Block {\n  constructor(params = {}) {\n    super();\n\n    this.props.blockId = params.blockId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    return this.getResult(DividerDto);\n  }\n}\n\n/**\n * {@link https://api.slack.com/reference/block-kit/blocks#divider|View in Slack API Documentation}\n */\n\nmodule.exports = {\n  Divider,\n  DividerDto,\n};\n","const { Block } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { types, enumValues, props } = require('../utility/constants');\n\nclass FileDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.blocks.file;\n    this.source = enumValues.remote;\n    this.external_id = params.externalId;\n    this.block_id = params.blockId;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass File extends Block {\n  constructor(params = {}) {\n    super();\n\n    this.props.externalId = params.externalId;\n    this.props.blockId = params.blockId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the Slack-provided ID for the external file\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#file|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  externalId(string) {\n    return this.set(string, props.externalId);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    return this.getResult(FileDto);\n  }\n}\n\nmodule.exports = {\n  File,\n  FileDto,\n};\n","const { Block } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass HeaderDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.blocks.header;\n    this.text = params.text;\n    this.block_id = params.blockId;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Header extends Block {\n  constructor(params = {}) {\n    super();\n\n    this.props.text = params.text;\n    this.props.blockId = params.blockId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the text to be displayed in the Header Block\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 3000 characters\n   *    * Plain text only\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#header|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  text(string) {\n    return this.set(string, props.text);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      text: BuilderHelper.getPlainTextObject(this.props.text),\n    };\n\n    return this.getResult(HeaderDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  Header,\n  HeaderDto,\n};\n","const { Block } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass ImageDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.blocks.image;\n    this.image_url = params.imageUrl;\n    this.alt_text = params.altText;\n    this.title = params.title;\n    this.block_id = params.blockId;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Image extends Block {\n  constructor(params = {}) {\n    super();\n\n    this.props.imageUrl = params.imageUrl;\n    this.props.altText = params.altText;\n    this.props.title = params.title;\n    this.props.blockId = params.blockId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the source URL to load the Image from\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 2000 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#image|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  imageUrl(string) {\n    return this.set(string, props.imageUrl);\n  }\n\n  /**\n   * Sets the textual summary of the Image\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 2000 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#image|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  altText(string) {\n    return this.set(string, props.altText);\n  }\n\n  /**\n   * Sets an optional title for the Image\n   *\n   * **Slack Validation Rules:**\n   *    * Max 2000 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#image|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  title(string) {\n    return this.set(string, props.title);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      title: BuilderHelper.getPlainTextObject(this.props.title),\n    };\n\n    return this.getResult(ImageDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  Image,\n  ImageDto,\n};\n","const { Actions, ActionsDto } = require('./actions');\nconst { Context, ContextDto } = require('./context');\nconst { Divider, DividerDto } = require('./divider');\nconst { File, FileDto } = require('./file');\nconst { Header, HeaderDto } = require('./header');\nconst { Image, ImageDto } = require('./image');\nconst { Input, InputDto } = require('./input');\nconst { Section, SectionDto } = require('./section');\n\nconst BlockDto = {\n  ActionsDto,\n  ContextDto,\n  DividerDto,\n  FileDto,\n  HeaderDto,\n  ImageDto,\n  InputDto,\n  SectionDto,\n};\n\nconst getBlocks = () => {\n  const getInstance = (Class, params) => new Class(params);\n\n  return {\n\n    /**\n     * Creates and returns an Actions Block\n     *\n     * {@link https://api.slack.com/reference/block-kit/blocks#actions|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.blockId] Sets a string to be an identifier for the block, that will be available in interaction payloads\n     * @return {Actions} An instance of Actions\n     */\n\n    Actions: (params) => getInstance(Actions, params),\n\n    /**\n     * Creates and returns a Context Block\n     *\n     * {@link https://api.slack.com/reference/block-kit/blocks#context|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.blockId] Sets a string to be an identifier for the block, that will be available in interaction payloads\n     * @return {Context} An instance of Context\n     */\n\n    Context: (params) => getInstance(Context, params),\n\n    /**\n     * Creates and returns a Divider\n     *\n     * {@link https://api.slack.com/reference/block-kit/blocks#divider|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.blockId] Sets a string to be an identifier for the block, that will be available in interaction payloads\n     * @return {Divider} An instance of Divider\n     */\n\n    Divider: (params) => getInstance(Divider, params),\n\n    /**\n     * Creates and returns a File Block\n     *\n     * {@link https://api.slack.com/reference/block-kit/blocks#file|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters for File\n     * @param {string} [params.blockId] Sets a string to be an identifier for the block, that will be available in interaction payloads\n     * @param {string} [params.externalId] Sets the Slack-provided ID for the external file\n     * @return {File} An instance of File\n     */\n\n    File: (params) => getInstance(File, params),\n\n    /**\n     * Creates and returns a Header Block\n     *\n     * {@link https://api.slack.com/reference/block-kit/blocks#header|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.blockId] Sets a string to be an identifier for the block, that will be available in interaction payloads\n     * @param {string} [params.text] Sets the text to be displayed in the Header Block\n     * @return {Section} An instance of Header\n     */\n\n    Header: (params) => getInstance(Header, params),\n\n    /**\n     * Creates and returns an Image Block\n     *\n     * {@link https://api.slack.com/reference/block-kit/blocks#image|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.blockId] Sets a string to be an identifier for the block, that will be available in interaction payloads\n     * @param {string} [params.imageUrl] Sets the source URL to load the Image from\n     * @param {string} [params.altText] Sets the textual summary of the Image\n     * @param {string} [params.title] Sets an optional title for the Image\n     * @return {Image} An instance of Image\n     */\n\n    Image: (params) => getInstance(Image, params),\n\n    /**\n     * Creates and returns an Input Block\n     *\n     * {@link https://api.slack.com/reference/block-kit/blocks#input|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.blockId] Sets a string to be an identifier for the block, that will be available in interaction payloads\n     * @param {string} [params.label] Sets a label to be displayed for the Input Block\n     * @param {string} [params.hint] Sets the hint to be displayed under the Input.\n     * @return {Input} An instance of Input\n     */\n\n    Input: (params) => getInstance(Input, params),\n\n    /**\n     * Creates and returns a Section Block\n     *\n     * {@link https://api.slack.com/reference/block-kit/blocks#section|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.blockId] Sets a string to be an identifier for the block, that will be available in interaction payloads\n     * @param {string} [params.text] Sets the text to be displayed in the Section Block\n     * @return {Section} An instance of Section\n     */\n\n    Section: (params) => getInstance(Section, params),\n  };\n};\n\nmodule.exports = {\n  Actions,\n  Context,\n  Divider,\n  File,\n  Header,\n  Image,\n  Input,\n  Section,\n  BlockDto,\n  getBlocks,\n};\n","const { Block } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass InputDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.blocks.input;\n    this.label = params.label;\n    this.element = params.element;\n    this.dispatch_action = params.dispatchAction;\n    this.block_id = params.blockId;\n    this.hint = params.hint;\n    this.optional = params.optional;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Input extends Block {\n  constructor(params = {}) {\n    super();\n\n    this.props.label = params.label;\n    this.props.blockId = params.blockId;\n    this.props.hint = params.hint;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets a label to be displayed for the Input Block\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 2000 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#input|View in Slack API Documentation}\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  label(string) {\n    return this.set(string, props.label);\n  }\n\n  /**\n   * Sets the interactive Element of the Input Block\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 1 Element\n   *    * Supports TextInput, SelectMenus, MultiSelectMenus, and DatePickers\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#input|View in Slack API Documentation}\n   *\n   * @param {Element} element\n   * @return {this} The instance on which the method is called\n   */\n\n  element(element) {\n    return this.set(element, props.element);\n  }\n\n  /**\n   * Sets the hint to be displayed under the Input.\n   *\n   * **Slack Validation Rules:**\n   *    * Max 2000 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#input|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  hint(string) {\n    return this.set(string, props.hint);\n  }\n\n  /**\n   * Sets the 'optional' parameter to true, allowing the user to submit\n   * the form without inputting a value into the Input Element\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#input|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  optional() {\n    return this.set(true, props.optional);\n  }\n\n  /**\n   * Sets the 'dispatch_action' parameter to true, meaning an actions\n   * payload is sent upon interaction.\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#input|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  dispatchAction() {\n    return this.set(true, props.dispatchAction);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      label: BuilderHelper.getPlainTextObject(this.props.label),\n      hint: BuilderHelper.getPlainTextObject(this.props.hint),\n      element: BuilderHelper.getBuilderResult(this.props.element),\n    };\n\n    return this.getResult(InputDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  Input,\n  InputDto,\n};\n","const { Block } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass SectionDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.blocks.section;\n    this.text = params.text;\n    this.block_id = params.blockId;\n    this.fields = params.fields;\n    this.accessory = params.accessory;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Section extends Block {\n  constructor(params = {}) {\n    super();\n\n    this.props.text = params.text;\n    this.props.blockId = params.blockId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the text to be displayed in the Section Block\n   *\n   * **Slack Validation Rules:**\n   *    * **Required if property fields undefined** ⚠\n   *    * Max 3000 characters\n   *    * Supports markdown\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#section|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  text(string) {\n    return this.set(string, props.text);\n  }\n\n  /**\n   * Sets text fields in two columns, side-by-side\n   *\n   * **Slack Validation Rules:**\n   *    * **Required if property text undefined** ⚠\n   *    * Max 10 items\n   *    * Max 2000 characters for each field\n   *    * Supports markdown\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#section|View in Slack API Documentation}\n   *\n   * @param {...string|Array<string>} fields Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  fields(...fields) {\n    return this.append(fields.flat(), props.fields);\n  }\n\n  /**\n   * Sets an interactive Element to be attached to the Section Block\n   *\n   * **Slack Validation Rules:**\n   *    * Max 1 item\n   *\n   * {@link https://api.slack.com/reference/block-kit/blocks#section|View in Slack API Documentation}\n   *\n   * @param {Element} element\n   * @return {this} The instance on which the method is called\n   */\n\n  accessory(element) {\n    return this.set(element, props.accessory);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      text: BuilderHelper.getMarkdownObject(this.props.text),\n      fields: BuilderHelper.getFields(this.props.fields),\n      accessory: BuilderHelper.getBuilderResult(this.props.accessory),\n    };\n\n    return this.getResult(SectionDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  Section,\n  SectionDto,\n};\n","const Element = require('./element');\nconst { props } = require('../../utility/constants');\n\n/**\n * @class Make new Button\n * @abstract\n * @extends Element\n */\n\nclass ActionElement extends Element {\n  /**\n   * Sets a string to be an identifier for the source of\n   * an action in interaction payloads\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Must be unique to view\n   *    * Max 255 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  actionId(string) {\n    return this.set(string, props.actionId);\n  }\n}\n\nmodule.exports = ActionElement;\n","const ActionElement = require('./action-element');\nconst { props } = require('../../utility/constants');\n\nclass ConfirmableElement extends ActionElement {\n  /**\n   * Adds a ConfirmationDialog to be shown upon interacting with\n   * the current element or submitting the view\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements|View in Slack API Documentation}\n   *\n   * @param {ConfirmationDialog} obj\n   * @return {this} The instance on which the method is called\n   */\n\n  confirm(obj) {\n    return this.set(obj, props.confirm);\n  }\n}\n\nmodule.exports = ConfirmableElement;\n","const { Builder } = require('../../utility/lib');\nconst { categories } = require('../../utility/constants');\n\nclass Element extends Builder {\n  constructor() {\n    super();\n\n    this.category = categories.element;\n  }\n\n  /**\n   * Performs no alterations to the object. Meant to simulate a closing\n   * HTML tag for those who prefer the look of such code.\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  end() {\n    return this;\n  }\n}\n\nmodule.exports = Element;\n","const Element = require('./element');\nconst ActionElement = require('./action-element');\nconst ConfirmableElement = require('./confirmable-element');\nconst SelectableElement = require('./selectable-element');\nconst SelectElement = require('./select-element');\nconst MultiSelectElement = require('./multiselect-element');\n\nmodule.exports = {\n  Element,\n  ActionElement,\n  ConfirmableElement,\n  SelectableElement,\n  SelectElement,\n  MultiSelectElement,\n};\n","const SelectElement = require('./select-element');\nconst { props } = require('../../utility/constants');\n\nclass MultiSelectElement extends SelectElement {\n  /**\n   * Sets a limit to how many items the user can select in any one MultiSelect\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#multi_select|View in Slack API Documentation}\n   *\n   * @param {int} int\n   * @return {this} The instance on which the method is called\n   */\n\n  maxSelectedItems(int) {\n    return this.set(int, props.maxSelectedItems);\n  }\n}\n\nmodule.exports = MultiSelectElement;\n","const ConfirmableElement = require('./confirmable-element');\nconst { props } = require('../../utility/constants');\n\nclass SelectElement extends ConfirmableElement {\n  /**\n   * Adds the text in place of the input before selected or\n   * interacted with\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 150 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#select|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  placeholder(string) {\n    return this.set(string, props.placeholder);\n  }\n}\n\nmodule.exports = SelectElement;\n","const ConfirmableElement = require('./confirmable-element');\nconst { props } = require('../../utility/constants');\n\nclass SelectableElement extends ConfirmableElement {\n  /**\n   * Sets the Options for the current Element\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 100 Options\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements|View in Slack API Documentation}\n   *\n   * @param {...Option|Array<Option>} options Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  options(...options) {\n    return this.append(options.flat(), props.options);\n  }\n}\n\nmodule.exports = SelectableElement;\n","const { ConfirmableElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, enumValues, props } = require('../utility/constants');\n\n\nclass ButtonDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.button;\n    this.text = params.text;\n    this.action_id = params.actionId;\n    this.url = params.url;\n    this.value = params.value;\n    this.style = params.style;\n    this.confirm = params.confirm;\n\n    this.pruneAndFreeze();\n  }\n}\n\n\nclass Button extends ConfirmableElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.text = params.text;\n    this.props.actionId = params.actionId;\n    this.props.url = params.url;\n    this.props.value = params.value;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the display text for the Button\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 75 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#button|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  text(string) {\n    return this.set(string, props.text);\n  }\n\n  /**\n   * Sets the URL to redirect the user to when this Button is clicked\n   *\n   * **Slack Validation Rules:**\n   *    * Max 3000 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#button|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  url(string) {\n    return this.set(string, props.url);\n  }\n\n  /**\n   * Sets the value to be passed to your app when this Button is clicked\n   *\n   * **Slack Validation Rules:**\n   *    * Max 2000 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#button|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  value(string) {\n    return this.set(string, props.value);\n  }\n\n  /**\n   * Sets the style property to 'primary,' making the Button green\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#button|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  primary() {\n    return this.set(enumValues.primary, props.style);\n  }\n\n  /**\n   * Sets the style property to 'danger,' making the Button red\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#button|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  danger() {\n    return this.set(enumValues.danger, props.style);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n      text: BuilderHelper.getPlainTextObject(this.props.text),\n    };\n\n    return this.getResult(ButtonDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  Button,\n  ButtonDto,\n};\n","const { MultiSelectElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass ChannelMultiSelectDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.multiselect.channels;\n    this.placeholder = params.placeholder;\n    this.action_id = params.actionId;\n    this.initial_channels = params.initialChannels;\n    this.confirm = params.confirm;\n    this.max_selected_items = params.maxSelectedItems;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass ChannelMultiSelect extends MultiSelectElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.maxSelectedItems = params.maxSelectedItems;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the default selected items in the menu\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#channel_multi_select|View in Slack API Documentation}\n   *\n   * @param {...string|Array<string>} strings Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  initialChannels(...strings) {\n    return this.append(strings.flat(), props.initialChannels);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(ChannelMultiSelectDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  ChannelMultiSelect,\n  ChannelMultiSelectDto,\n};\n","const { SelectElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass ChannelSelectDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.select.channels;\n    this.placeholder = params.placeholder;\n    this.action_id = params.actionId;\n    this.initial_channel = params.initialChannel;\n    this.confirm = params.confirm;\n    this.response_url_enabled = params.responseUrlEnabled;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass ChannelSelect extends SelectElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.initialChannel = params.initialChannel;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the default selected item in the menu\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#channel_select|View in Slack API Documentation}\n   *\n   * @param {string} string Channel ID\n   * @return {this} The instance on which the method is called\n   */\n\n  initialChannel(string) {\n    return this.set(string, props.initialChannel);\n  }\n\n  /**\n   * Sets option to true, allowing a response URL to be provided at submission\n   *\n   * **Slack Validation Rules:**\n   *    * Only available in modals with Inputs ⚠\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#channel_select|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  responseUrlEnabled() {\n    return this.set(true, props.responseUrlEnabled);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(ChannelSelectDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  ChannelSelect,\n  ChannelSelectDto,\n};\n","const { SelectableElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass CheckboxesDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.checkbox;\n    this.action_id = params.actionId;\n    this.options = params.options;\n    this.initial_options = params.initialOptions;\n    this.confirm = params.confirm;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Checkboxes extends SelectableElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.actionId = params.actionId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the default selected items in the menu\n   *\n   * **Slack Validation Rules:**\n   *    * Must be an exact match to one of the provided options\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#checkboxes|View in Slack API Documentation}\n   *\n   * @param {...Option|Array<Option>} options Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  initialOptions(...options) {\n    return this.append(options.flat(), props.initialOptions);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      options: BuilderHelper.getOptions(this.props.options, { isMarkdown: true }),\n      initialOptions: BuilderHelper.getOptions(this.props.initialOptions, { isMarkdown: true }),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(CheckboxesDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  Checkboxes,\n  CheckboxesDto,\n};\n","const { MultiSelectElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass ConversationMultiSelectDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.multiselect.conversations;\n    this.placeholder = params.placeholder;\n    this.action_id = params.actionId;\n    this.initial_conversations = params.initialConversations;\n    this.default_to_current_conversation = params.defaultToCurrentConversation;\n    this.confirm = params.confirm;\n    this.max_selected_items = params.maxSelectedItems;\n    this.filter = params.filter;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass ConversationMultiSelect extends MultiSelectElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.maxSelectedItems = params.maxSelectedItems;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the default selected items in the menu\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_multi_select|View in Slack API Documentation}\n   *\n   * @param {...string|Array<string>} strings Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  initialConversations(...strings) {\n    return this.append(strings.flat(), props.initialConversations);\n  }\n\n  /**\n   * Sets default selected conversation to the one currently open for the user\n   *\n   * **Slack Validation Rules:**\n   *    * If initial conversations provided, this option is ignored\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_multi_select|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  defaultToCurrentConversation() {\n    return this.set(true, props.defaultToCurrentConversation);\n  }\n\n  /**\n   * Defines which conversations should be included in the list. Possible\n   * enumValues are *im*, *impm*, *private*, and *public*\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_multi_select|View in Slack API Documentation}\n   *\n   * @param {...string|Array<string>} filters Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  filter(...filters) {\n    return this.append(filters.flat(), props.filter);\n  }\n\n  /**\n   * Excludes external shared conversations from the list\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_multi_select|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  excludeExternalSharedChannels() {\n    return this.set(true, props.excludeExternalSharedChannels);\n  }\n\n  /**\n   * Excludes conversations with bot users from the list\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_multi_select|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  excludeBotUsers() {\n    return this.set(true, props.excludeBotUsers);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n      filter: BuilderHelper.getFilter(this.props),\n    };\n\n    return this.getResult(ConversationMultiSelectDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  ConversationMultiSelect,\n  ConversationMultiSelectDto,\n};\n","const { SelectElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass ConversationSelectDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.select.conversations;\n    this.placeholder = params.placeholder;\n    this.action_id = params.actionId;\n    this.initial_conversation = params.initialConversation;\n    this.default_to_current_conversation = params.defaultToCurrentConversation;\n    this.confirm = params.confirm;\n    this.response_url_enabled = params.responseUrlEnabled;\n    this.filter = params.filter;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass ConversationSelect extends SelectElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.initialConversation = params.initialConversation;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the select menu to have an initial value\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_select|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  initialConversation(string) {\n    return this.set(string, props.initialConversation);\n  }\n\n  /**\n   * Sets default selected conversation to the one currently open for the user\n   *\n   * **Slack Validation Rules:**\n   *    * If initial conversations provided, this option is ignored\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_select|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  defaultToCurrentConversation() {\n    return this.set(true, props.defaultToCurrentConversation);\n  }\n\n  /**\n   * Sets option to true, allowing a response URL to be provided at submission\n   *\n   * **Slack Validation Rules:**\n   *    * Only available in modals with Inputs ⚠\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_select|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  responseUrlEnabled() {\n    return this.set(true, props.responseUrlEnabled);\n  }\n\n  /**\n   * Defines which conversations should be included in the list. Possible\n   * enumValues are *im*, *impm*, *private*, and *public*\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_select|View in Slack API Documentation}\n   *\n   * @param {...string|Array<string>} filters Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  filter(...filters) {\n    return this.append(filters.flat(), props.filter);\n  }\n\n  /**\n   * Excludes external shared conversations from the list\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_select|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  excludeExternalSharedChannels() {\n    return this.set(true, props.excludeExternalSharedChannels);\n  }\n\n  /**\n   * Excludes conversations with bot users from the list\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_select|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  excludeBotUsers() {\n    return this.set(true, props.excludeBotUsers);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n      filter: BuilderHelper.getFilter(this.props),\n    };\n\n    return this.getResult(ConversationSelectDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  ConversationSelect,\n  ConversationSelectDto,\n};\n","const { ConfirmableElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass DatePickerDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.datepicker;\n    this.action_id = params.actionId;\n    this.placeholder = params.placeholder;\n    this.initial_date = params.initialDate;\n    this.confirm = params.confirm;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass DatePicker extends ConfirmableElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.initialDate = params.initialDate;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Adds the text in place of the input before selected or\n   * interacted with\n   *\n   * **Slack Validation Rules:**\n   *    * Max 150 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#datepicker|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  placeholder(string) {\n    return this.set(string, props.placeholder);\n  }\n\n  /**\n   * Sets the default selected date in the menu\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#datepicker|View in Slack API Documentation}\n   *\n   * @param {Date} date\n   * @return {this} The instance on which the method is called\n   */\n\n  initialDate(date) {\n    return this.set(date, props.initialDate);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      initialDate: BuilderHelper.getFormattedDate(this.props.initialDate),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(DatePickerDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  DatePicker,\n  DatePickerDto,\n};\n","const { MultiSelectElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass ExternalMultiSelectDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.multiselect.external;\n    this.placeholder = params.placeholder;\n    this.action_id = params.actionId;\n    this.min_query_length = params.minQueryLength;\n    this.initial_options = params.initialOptions;\n    this.confirm = params.confirm;\n    this.max_selected_items = params.maxSelectedItems;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass ExternalMultiSelect extends MultiSelectElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.minQueryLength = params.minQueryLength;\n    this.props.maxSelectedItems = params.maxSelectedItems;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets a minimum number of characters types before querying your options URL\n   *\n   * **Slack Validation Rules:**\n   *    * If not set, request will be sent on every character change\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#external_multi_select|View in Slack API Documentation}\n   *\n   * @param {int} int\n   * @return {this} The instance on which the method is called\n   */\n\n  minQueryLength(int) {\n    return this.set(int, props.minQueryLength);\n  }\n\n  /**\n   * Sets the select menu to have an initial value\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#external_multi_select|View in Slack API Documentation}\n   *\n   * @param {...Option|Array<Option>} options Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  initialOptions(...options) {\n    return this.append(options.flat(), props.initialOptions);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      initialOptions: BuilderHelper.getOptions(this.props.initialOptions),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(ExternalMultiSelectDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  ExternalMultiSelect,\n  ExternalMultiSelectDto,\n};\n","const { SelectElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass ExternalSelectDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.select.external;\n    this.placeholder = params.placeholder;\n    this.action_id = params.actionId;\n    this.initial_option = params.initialOption;\n    this.min_query_length = params.minQueryLength;\n    this.confirm = params.confirm;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass ExternalSelect extends SelectElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.minQueryLength = params.minQueryLength;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the select menu to have an initial value\n   *\n   * **Slack Validation Rules:**\n   *    * Must be exact match to one of the Options\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#external_select|View in Slack API Documentation}\n   *\n   * @param {Option} option\n   * @return {this} The instance on which the method is called\n   */\n\n  initialOption(option) {\n    return this.set(option, props.initialOption);\n  }\n\n  /**\n   * Sets a minimum number of characters types before querying your options URL\n   *\n   * **Slack Validation Rules:**\n   *    * If not set, request will be sent on every character change\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#external_select|View in Slack API Documentation}\n   *\n   * @param {int} int\n   * @return {this} The instance on which the method is called\n   */\n\n  minQueryLength(int) {\n    return this.set(int, props.minQueryLength);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      initialOption: BuilderHelper.getOption(this.props.initialOption),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(ExternalSelectDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  ExternalSelect,\n  ExternalSelectDto,\n};\n","const { Element } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { types, props } = require('../utility/constants');\n\nclass ImgDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.image;\n    this.image_url = params.imageUrl;\n    this.alt_text = params.altText;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Img extends Element {\n  constructor(params = {}) {\n    super();\n\n    this.props.imageUrl = params.imageUrl;\n    this.props.altText = params.altText;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the source URL to load the Img from\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 2000 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#image|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  imageUrl(string) {\n    return this.set(string, props.imageUrl);\n  }\n\n  /**\n   * Sets the textual summary of the Img\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 2000 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#image|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  altText(string) {\n    return this.set(string, props.altText);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    return this.getResult(ImgDto);\n  }\n}\n\nmodule.exports = {\n  Img,\n  ImgDto,\n};\n","const { Button, ButtonDto } = require('./button');\nconst { ChannelMultiSelect, ChannelMultiSelectDto } = require('./channel-multiselect');\nconst { ChannelSelect, ChannelSelectDto } = require('./channel-select');\nconst { Checkboxes, CheckboxesDto } = require('./checkboxes');\nconst { ConversationMultiSelect, ConversationMultiSelectDto } = require('./conversations-multiselect');\nconst { ConversationSelect, ConversationSelectDto } = require('./conversations-select');\nconst { DatePicker, DatePickerDto } = require('./datepicker');\nconst { ExternalMultiSelect, ExternalMultiSelectDto } = require('./external-multiselect');\nconst { ExternalSelect, ExternalSelectDto } = require('./external-select');\nconst { Img, ImgDto } = require('./img');\nconst { TextInput, TextInputDto } = require('./text-input');\nconst { OverflowMenu, OverflowMenuDto } = require('./overflow-menu');\nconst { RadioButtons, RadioButtonsDto } = require('./radio-buttons');\nconst { StaticSelect, StaticSelectDto } = require('./static-select');\nconst { StaticMultiSelect, StaticMultiSelectDto } = require('./static-multiselect');\nconst { TimePicker, TimePickerDto } = require('./time-picker');\nconst { UserMultiSelect, UserMultiSelectDto } = require('./user-multiselect');\nconst { UserSelect, UserSelectDto } = require('./user-select');\n\nconst ElementDto = {\n  ButtonDto,\n  ChannelMultiSelectDto,\n  ChannelSelectDto,\n  CheckboxesDto,\n  ConversationMultiSelectDto,\n  ConversationSelectDto,\n  DatePickerDto,\n  ExternalMultiSelectDto,\n  ExternalSelectDto,\n  ImgDto,\n  TextInputDto,\n  OverflowMenuDto,\n  RadioButtonsDto,\n  StaticMultiSelectDto,\n  StaticSelectDto,\n  TimePickerDto,\n  UserMultiSelectDto,\n  UserSelectDto,\n};\n\nconst getElements = () => {\n  const getInstance = (Class, params) => new Class(params);\n\n  return {\n\n    /**\n     * Creates and returns a Button Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#button|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.text] Sets the display text for the Button\n     * @param {string} [params.url] Sets the URL to redirect the user to when this Button is clicked\n     * @param {string} [params.value] Sets the value to be passed to your app when this Button is clicked\n     * @return {Button} An instance of Button\n     */\n\n    Button: (params) => getInstance(Button, params),\n\n    /**\n     * Creates and returns a ChannelMultiSelect Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#channel_multi_select|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {int} [params.maxSelectedItems] Sets a limit to how many items the user can select\n     * @return {ChannelMultiSelect} An instance of ChannelMultiSelect\n     */\n\n    ChannelMultiSelect: (params) => getInstance(ChannelMultiSelect, params),\n\n    /**\n     * Creates and returns a ChannelSelect Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#channel_select|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {string} [params.initialChannel] Sets the default selected item in the menu\n     * @return {ChannelSelect} An instance of ChannelSelect\n     */\n\n    ChannelSelect: (params) => getInstance(ChannelSelect, params),\n\n    /**\n     * Creates and returns a Checkboxes Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#checkboxes|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @return {Checkboxes} An instance of Checkboxes\n     */\n\n    Checkboxes: (params) => getInstance(Checkboxes, params),\n\n    /**\n     * Creates and returns a ConversationMultiSelect Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_multi_select|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {int} [params.maxSelectedItems] Sets a limit to how many items the user can select\n     * @return {ConversationMultiSelect} An instance of ConversationMultiSelect\n     */\n\n    ConversationMultiSelect: (params) => getInstance(ConversationMultiSelect, params),\n\n    /**\n     * Creates and returns a ConversationSelect Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#conversation_select|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {string} [params.initialConversation] Sets the default selected item in the menu\n     * @return {ConversationSelect} An instance of ConversationSelect\n     */\n\n    ConversationSelect: (params) => getInstance(ConversationSelect, params),\n\n    /**\n     * Creates and returns a DatePicker Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#datepicker|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {string} [params.initialDate] Sets the default selected date in the menu\n     * @return {DatePicker} An instance of DatePicker\n     */\n\n    DatePicker: (params) => getInstance(DatePicker, params),\n\n    /**\n     * Creates and returns a ExternalMultiSelect Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#external_multi_select|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {int} [params.maxSelectedItems] Sets a limit to how many items the user can select\n     * @param {int} [params.minQueryLength] Sets a minimum number of characters types before querying your options URL\n     * @return {ExternalMultiSelect} An instance of ExternalMultiSelect\n     */\n\n    ExternalMultiSelect: (params) => getInstance(ExternalMultiSelect, params),\n\n    /**\n     * Creates and returns a ExternalSelect Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#external_select|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {int} [params.minQueryLength] Sets a minimum number of characters types before querying your options URL\n     * @return {ExternalSelect} An instance of ExternalSelect\n     */\n\n    ExternalSelect: (params) => getInstance(ExternalSelect, params),\n\n    /**\n     * Creates and returns an Img Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#image|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.imageUrl] Sets the source URL to load the Img from\n     * @param {string} [params.altText] Sets the textual summary of the Img\n     * @return {Img} An instance of Img\n     */\n\n    Img: (params) => getInstance(Img, params),\n\n    /**\n     * Creates and returns an OverflowMenu Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#overflow|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @return {OverflowMenu} An instance of OverflowMenu\n     */\n\n    OverflowMenu: (params) => getInstance(OverflowMenu, params),\n\n    /**\n     * Creates and returns a RadioButtons Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#radio|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @return {RadioButtons} An instance of RadioButtons\n     */\n\n    RadioButtons: (params) => getInstance(RadioButtons, params),\n\n    /**\n     * Creates and returns a StaticMultiSelect Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#static_multi_select|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {int} [params.maxSelectedItems] Sets a limit to how many items the user can select\n     * @return {StaticMultiSelect} An instance of StaticMultiSelect\n     */\n\n    StaticMultiSelect: (params) => getInstance(StaticMultiSelect, params),\n\n    /**\n     * Creates and returns a StaticSelect Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#static_select|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @return {StaticSelect} An instance of StaticSelect\n     */\n\n    StaticSelect: (params) => getInstance(StaticSelect, params),\n\n    /**\n     * Creates and returns a TextInput Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#input|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {string} [params.initialValue] Sets the default text entered into the TextInput at modal load\n     * @param {int} [params.minLength] Sets a minimum character count in order for the user to submit the form\n     * @param {int} [params.maxLength] Sets a maximum character count allowed to send the form\n     * @return {TextInput} An instance of Input\n     */\n\n    TextInput: (params) => getInstance(TextInput, params),\n\n    /**\n     * Creates and returns a TimePicker Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#timepicker|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {string} [params.initialTime] Sets the default selected time in the menu\n     * @return {TimePicker} An instance of TimePicker\n     */\n\n    TimePicker: (params) => getInstance(TimePicker, params),\n\n    /**\n     * Creates and returns a UserMultiSelect Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#users_multi_select|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {int} [params.maxSelectedItems] Sets a limit to how many items the user can select\n     * @return {UserMultiSelect} An instance of UserMultiSelect\n     */\n\n    UserMultiSelect: (params) => getInstance(UserMultiSelect, params),\n\n    /**\n     * Creates and returns a UserSelect Element\n     *\n     * {@link https://api.slack.com/reference/block-kit/block-elements#users_select|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.actionId] Sets a string to be an identifier for the source of an action in interaction payloads\n     * @param {string} [params.placeholder] Adds the text in place of the input before selected or interacted with\n     * @param {string} [params.initialUser]\n     * @return {UserSelect} An instance of UserSelect\n     */\n\n    UserSelect: (params) => getInstance(UserSelect, params),\n  };\n};\n\nmodule.exports = {\n  Button,\n  ChannelMultiSelect,\n  ChannelSelect,\n  Checkboxes,\n  ConversationMultiSelect,\n  ConversationSelect,\n  DatePicker,\n  ExternalMultiSelect,\n  ExternalSelect,\n  Img,\n  TextInput,\n  OverflowMenu,\n  RadioButtons,\n  StaticMultiSelect,\n  StaticSelect,\n  TimePicker,\n  UserMultiSelect,\n  UserSelect,\n  ElementDto,\n  getElements,\n};\n","const { SelectableElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types } = require('../utility/constants');\n\nclass OverflowMenuDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.overflow;\n    this.action_id = params.actionId;\n    this.options = params.options;\n    this.confirm = params.confirm;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass OverflowMenu extends SelectableElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.actionId = params.actionId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      options: BuilderHelper.getOptions(this.props.options),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(OverflowMenuDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  OverflowMenu,\n  OverflowMenuDto,\n};\n\n/**\n * {@link https://api.slack.com/reference/block-kit/block-elements#overflow|View in Slack API Documentation}\n */\n","const { SelectableElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass RadioButtonsDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.radiobutton;\n    this.action_id = params.actionId;\n    this.options = params.options;\n    this.initial_option = params.initialOption;\n    this.confirm = params.confirm;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass RadioButtons extends SelectableElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.actionId = params.actionId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the default selected item in the menu\n   *\n   * **Slack Validation Rules:**\n   *    * Must be an exact match to one of the provided options\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#radio|View in Slack API Documentation}\n   *\n   * @param {Option} option\n   * @return {this} The instance on which the method is called\n   */\n\n  initialOption(option) {\n    return this.set(option, props.initialOption);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      options: BuilderHelper.getOptions(this.props.options, { isMarkdown: true }),\n      initialOption: BuilderHelper.getOption(this.props.initialOption, { isMarkdown: true }),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(RadioButtonsDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  RadioButtons,\n  RadioButtonsDto,\n};\n","const { MultiSelectElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass StaticMultiSelectDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.multiselect.static;\n    this.placeholder = params.placeholder;\n    this.action_id = params.actionId;\n    this.options = params.options;\n    this.option_groups = params.optionGroups;\n    this.initial_options = params.initialOptions;\n    this.confirm = params.confirm;\n    this.max_selected_items = params.maxSelectedItems;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass StaticMultiSelect extends MultiSelectElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.maxSelectedItems = params.maxSelectedItems;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the Options for the StaticMultiSelect\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 100 Options\n   *    * Only one of options property or optionGroups should be defined\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#static_multi_select|View in Slack API Documentation}\n   *\n   * @param {...Option|Option[]} options\n   * @return {this} The instance on which the method is called\n   */\n\n  options(...options) {\n    return this.append(options.flat(), props.options);\n  }\n\n  /**\n   * Sets the OptionGroup for the StaticMultiSelect, Options placed into\n   * logical and named groups.\n   *\n   * **Slack Validation Rules:**\n   *    * Max 100 Options\n   *    * Only one of options property or optionGroups should be defined\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#static_multi_select|View in Slack API Documentation}\n   *\n   * @param {...OptionGroup|OptionGroup[]} optionGroups\n   * @return {this} The instance on which the method is called\n   */\n\n  optionGroups(...optionGroups) {\n    return this.append(optionGroups.flat(), props.optionGroups);\n  }\n\n  /**\n   * Sets the default selected item in the menu\n   *\n   * **Slack Validation Rules:**\n   *    * Must have exact matches to the included Options\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#static_multi_select|View in Slack API Documentation}\n   *\n   * @param {...Option|Array<Option>} options Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  initialOptions(...options) {\n    return this.append(options.flat(), props.initialOptions);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      options: BuilderHelper.getOptions(this.props.options),\n      initialOptions: BuilderHelper.getOptions(this.props.initialOptions),\n      optionGroups: BuilderHelper.getBuilderResults(this.props.optionGroups),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(StaticMultiSelectDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  StaticMultiSelect,\n  StaticMultiSelectDto,\n};\n","const { SelectElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass StaticSelectDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.select.static;\n    this.placeholder = params.placeholder;\n    this.action_id = params.actionId;\n    this.options = params.options;\n    this.option_groups = params.optionGroups;\n    this.initial_option = params.initialOption;\n    this.confirm = params.confirm;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass StaticSelect extends SelectElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the Options for the StaticSelect\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 100 Options\n   *    * Only one of options property or optionGroups should be defined\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#static_select|View in Slack API Documentation}\n   *\n   * @param {...Option|Array<Option>} options Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  options(...options) {\n    return this.append(options.flat(), props.options);\n  }\n\n  /**\n   * Sets the OptionGroup for the StaticSelect, Options placed into\n   * logical and named groups.\n   *\n   * **Slack Validation Rules:**\n   *    * Max 100 Options\n   *    * Only one of options property or optionGroups should be defined\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#static_select|View in Slack API Documentation}\n   *\n   * @param {...OptionGroup|Array<OptionGroup>} optionGroups Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  optionGroups(...optionGroups) {\n    return this.append(optionGroups.flat(), props.optionGroups);\n  }\n\n  /**\n   * Sets the default selected item in the menu\n   *\n   * **Slack Validation Rules:**\n   *    * Must be an exact match to one of the provided options\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#static_select|View in Slack API Documentation}\n   *\n   * @param {Option} option\n   * @return {this} The instance on which the method is called\n   */\n\n  initialOption(option) {\n    return this.set(option, props.initialOption);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      options: BuilderHelper.getOptions(this.props.options),\n      optionGroups: BuilderHelper.getBuilderResults(this.props.optionGroups),\n      initialOption: BuilderHelper.getOption(this.props.initialOption),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(StaticSelectDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  StaticSelect,\n  StaticSelectDto,\n};\n","const { ActionElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props, enumValues } = require('../utility/constants');\n\nclass TextInputDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.input;\n    this.action_id = params.actionId;\n    this.placeholder = params.placeholder;\n    this.initial_value = params.initialValue;\n    this.multiline = params.multiline;\n    this.min_length = params.minLength;\n    this.max_length = params.maxLength;\n    this.dispatch_action_config = params.dispatchActionConfig;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass TextInput extends ActionElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.initialValue = params.initialValue;\n    this.props.minLength = params.minLength;\n    this.props.maxLength = params.maxLength;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Adds the text in place of the input before selected or\n   * interacted with\n   *\n   * **Slack Validation Rules:**\n   *    * Max 150 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#input|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  placeholder(string) {\n    return this.set(string, props.placeholder);\n  }\n\n  /**\n   * Sets the default text entered into the TextInput at load\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#input|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  initialValue(string) {\n    return this.set(string, props.initialValue);\n  }\n\n  /**\n   * Sets the Input to be multiline, as opposed to single line\n   *\n   * **Slack Validation Rules:**\n   *    * Defaults to false\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#input|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  multiline() {\n    return this.set(true, props.multiline);\n  }\n\n  /**\n   * Sets a minimum character count in order for the user to submit the form\n   *\n   * **Slack Validation Rules:**\n   *    * Maximum 3000 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#input|View in Slack API Documentation}\n   *\n   * @param {int} int\n   * @return {this} The instance on which the method is called\n   */\n\n  minLength(int) {\n    return this.set(int, props.minLength);\n  }\n\n  /**\n   * Sets a maximum character count allowed to send the form\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#input|View in Slack API Documentation}\n   *\n   * @param {int} int\n   * @return {this} The instance on which the method is called\n   */\n\n  maxLength(int) {\n    return this.set(int, props.maxLength);\n  }\n\n  /**\n   * Configures the text input to send an actions payload when Enter is pressed\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#input|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  dispatchActionOnEnterPressed() {\n    return this.set(enumValues.onEnterPressed, props.onEnterPressed);\n  }\n\n  /**\n   * Configures the text input to send an actions payload when a character is entered\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#input|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  dispatchActionOnCharacterEntered() {\n    return this.set(enumValues.onCharacterEntered, props.onCharacterEntered);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      dispatchActionConfig: BuilderHelper.getDispatchActionsConfigurationObject(this.props),\n    };\n\n    return this.getResult(TextInputDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  TextInput,\n  TextInputDto,\n};\n","const { ConfirmableElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass TimePickerDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.timepicker;\n    this.action_id = params.actionId;\n    this.placeholder = params.placeholder;\n    this.initial_time = params.initialTime;\n    this.confirm = params.confirm;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass TimePicker extends ConfirmableElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.initialTime = params.initialTime;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Adds the text in place of the input before selected or\n   * interacted with\n   *\n   * **Slack Validation Rules:**\n   *    * Max 150 characters\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#timepicker|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  placeholder(string) {\n    return this.set(string, props.placeholder);\n  }\n\n  /**\n   * Sets the default selected time in the menu\n   *\n   * **Slack Validation Rules:**\n   *    * Set in HH:mm format, where HH is 24-hour hour format and mm is minutes with a leading zero\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#timepicker|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  initialTime(string) {\n    return this.set(string, props.initialTime);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      initialDate: BuilderHelper.getFormattedDate(this.props.initialDate),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(TimePickerDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  TimePicker,\n  TimePickerDto,\n};\n","const { MultiSelectElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass UserMultiSelectDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.multiselect.users;\n    this.placeholder = params.placeholder;\n    this.action_id = params.actionId;\n    this.initial_users = params.initialUsers;\n    this.confirm = params.confirm;\n    this.max_selected_items = params.maxSelectedItems;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass UserMultiSelect extends MultiSelectElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.maxSelectedItems = params.maxSelectedItems;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets users to display in the menu by default at load\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#users_multi_select|View in Slack API Documentation}\n   *\n   * @param {...string|Array<string>} strings Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  initialUsers(...strings) {\n    return this.append(strings.flat(), props.initialUsers);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(UserMultiSelectDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  UserMultiSelect,\n  UserMultiSelectDto,\n};\n","const { SelectElement } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass UserSelectDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.elements.select.users;\n    this.placeholder = params.placeholder;\n    this.action_id = params.actionId;\n    this.initial_user = params.initialUser;\n    this.confirm = params.confirm;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass UserSelect extends SelectElement {\n  constructor(params = {}) {\n    super();\n\n    this.props.placeholder = params.placeholder;\n    this.props.actionId = params.actionId;\n    this.props.initialUser = params.initialUser;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets user to display in the menu by default at load\n   *\n   * {@link https://api.slack.com/reference/block-kit/block-elements#users_select|View in Slack API Documentation}\n   *\n   * @param {string} string User IDs\n   * @return {this} The instance on which the method is called\n   */\n\n  initialUser(string) {\n    return this.set(string, props.initialUser);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    const augmentedProps = {\n      placeholder: BuilderHelper.getPlainTextObject(this.props.placeholder),\n      confirm: BuilderHelper.getBuilderResult(this.props.confirm),\n    };\n\n    return this.getResult(UserSelectDto, augmentedProps);\n  }\n}\n\nmodule.exports = {\n  UserSelect,\n  UserSelectDto,\n};\n","const { getSurfaces } = require('./surfaces');\nconst { getBlocks } = require('./blocks');\nconst { getBits } = require('./bits');\nconst { getElements } = require('./elements');\n\nconst Bits = getBits();\nconst Blocks = getBlocks();\nconst Elements = getElements();\n\nmodule.exports = {\n  ...getSurfaces(),\n  Blocks,\n  Elements,\n  Bits,\n};\n","const ObjectBase = require('./object-base');\n\nmodule.exports = {\n  ObjectBase,\n};\n","class ObjectBase {\n  cleanAndFreeze() {\n    Object.keys(this)\n      .forEach((prop) => typeof this[prop] === 'undefined' && delete this[prop]);\n\n    return Object.freeze(this);\n  }\n}\n\nmodule.exports = ObjectBase;\n","const { ObjectBase } = require('./base');\n\nclass DispatchActionsConfigurationObject extends ObjectBase {\n  constructor(params) {\n    super();\n\n    this.trigger_actions_on = params.triggerActionsOn;\n\n    this.cleanAndFreeze();\n  }\n}\n\nmodule.exports = DispatchActionsConfigurationObject;\n","const { ObjectBase } = require('./base');\n\nclass FilterObject extends ObjectBase {\n  constructor(params) {\n    super();\n\n    this.include = params.filter;\n    this.exclude_external_shared_channels = params.excludeExternalSharedChannels;\n    this.exclude_bot_users = params.excludeBotUsers;\n\n    this.cleanAndFreeze();\n  }\n}\n\nmodule.exports = FilterObject;\n","const FilterObject = require('./filter-object');\nconst MarkdownObject = require('./markdown-object');\nconst PlainTextObject = require('./plain-text-object');\nconst DispatchActionsConfigurationObject = require('./dispatch-actions-configuration-object');\n\nmodule.exports = {\n  FilterObject,\n  MarkdownObject,\n  PlainTextObject,\n  DispatchActionsConfigurationObject,\n};\n","const { ObjectBase } = require('./base');\nconst { types } = require('../utility/constants');\n\nclass MarkdownObject extends ObjectBase {\n  constructor(text) {\n    super();\n\n    this.type = types.objects.markdown;\n    this.text = text;\n\n    this.cleanAndFreeze();\n  }\n}\n\nmodule.exports = MarkdownObject;\n","const { ObjectBase } = require('./base');\nconst { types } = require('../utility/constants');\n\nclass PlainTextObject extends ObjectBase {\n  constructor(text) {\n    super();\n\n    this.type = types.objects.text;\n    this.text = text;\n\n    this.cleanAndFreeze();\n  }\n}\n\nmodule.exports = PlainTextObject;\n","const Surface = require('./surface');\nconst { props } = require('../../utility/constants');\n\nclass AdvancedSurface extends Surface {\n  /**\n   * Sets a string sent back to your server together with all action and submission events.\n   *\n   * **Slack Validation Rules:**\n   *    * Max 3000 characters\n   *\n   * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  privateMetaData(string) {\n    return this.set(string, props.privateMetaData);\n  }\n\n  /**\n   * Sets a string sent back to your server together with all action and submission events to\n   * identify app actions for the current view.\n   *\n   * **Slack Validation Rules:**\n   *    * Max 255 characters\n   *\n   * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  callbackId(string) {\n    return this.set(string, props.callbackId);\n  }\n\n  /**\n   * Sets a custom identifier that must be unique for all views on a per-team basis\n   *\n   * **Slack Validation Rules:**\n   *    * Max 255 characters\n   *\n   * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  externalId(string) {\n    return this.set(string, props.externalId);\n  }\n\n  /**\n   * When called, builds the view and prints to the console the preview URL in\n   * order to open and preview the view on the Slack Block Builder website\n   */\n\n  printPreviewUrl() {\n    this.build();\n\n    console.log(encodeURI(`https://app.slack.com/block-kit-builder/#${JSON.stringify(this.result)}`).replace(/[!'()*]/g, escape));\n  }\n}\n\nmodule.exports = AdvancedSurface;\n","const Surface = require('./surface');\nconst AdvancedSurface = require('./advanced-surface');\n\nmodule.exports = {\n  Surface,\n  AdvancedSurface,\n};\n","const { Builder } = require('../../utility/lib');\nconst { props, categories } = require('../../utility/constants');\n\nclass Surface extends Builder {\n  constructor() {\n    super();\n\n    this.category = categories.surface;\n  }\n\n  /**\n   * Sets the Blocks of the Surface\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 100 Blocks\n   *\n   * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n   *\n   * @param {...Block|Array<Block>} blocks Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  blocks(...blocks) {\n    return this.append(blocks.flat(), props.blocks);\n  }\n\n  /**\n   * Builds the view and returns it as a Slack API-compatible object.\n   *\n   * @return {Object} An object representation of the built UI\n   */\n\n  buildToObject() {\n    this.build();\n\n    return this.result;\n  }\n\n  /**\n   * Builds the view and returns it as a Slack API-compatible JSON string.\n   *\n   * @return {String} A JSON string representation of the built UI\n   */\n\n  buildToJSON() {\n    this.build();\n\n    return JSON.stringify(this.result);\n  }\n\n  /**\n   * Builds the view and returns a Slack API-compatible array of Blocks objects.\n   *\n   * {@link https://api.slack.com/block-kit|View in Slack API Documentation}\n   *\n   * @return {Array} Array of built Block objects\n   */\n\n  getBlocks() {\n    this.build();\n\n    return [...this.result.blocks];\n  }\n\n  /**\n   * When called, builds the view and prints to the console the preview URL in\n   * order to open and preview the view on the Slack Block Builder website\n   */\n\n  printPreviewUrl() {\n    this.build();\n\n    console.log(encodeURI(`https://app.slack.com/block-kit-builder/#${JSON.stringify({ blocks: this.result.blocks, attachments: this.result.attachments })}`).replace(/[!'()*]/g, escape));\n  }\n}\n\nmodule.exports = Surface;\n","const { AdvancedSurface } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types } = require('../utility/constants');\n\nclass HomeTabDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.surfaces.home;\n    this.blocks = params.blocks;\n    this.private_metadata = params.privateMetaData;\n    this.callback_id = params.callbackId;\n    this.external_id = params.externalId;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass HomeTab extends AdvancedSurface {\n  constructor(params = {}) {\n    super();\n\n    this.props.privateMetaData = params.privateMetaData;\n    this.props.callbackId = params.callbackId;\n    this.props.externalId = params.externalId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    if (!this.hasBeenBuilt) {\n      const augmentedProps = {\n        blocks: BuilderHelper.getBuilderResults(this.props.blocks),\n      };\n\n      this.getResult(HomeTabDto, augmentedProps);\n    }\n\n    return this.result;\n  }\n}\n\nmodule.exports = {\n  HomeTab,\n  HomeTabDto,\n};\n\n/**\n * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n */\n","const { HomeTab, HomeTabDto } = require('./home-tab');\nconst { Message, MessageDto } = require('./message');\nconst { Modal, ModalDto } = require('./modal');\n\nconst SurfaceDto = {\n  HomeTabDto,\n  MessageDto,\n  ModalDto,\n};\n\nconst getSurfaces = () => {\n  const getInstance = (Class, params) => new Class(params);\n\n  return {\n\n    /**\n     * Creates and returns a HomeTab Surface\n     *\n     * {@link https://api.slack.com/surfaces/tabs|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.callbackId] Sets a string sent back to your server together with all action and submission events.\n     * @param {string} [params.externalId] Sets a custom identifier that must be unique for all views on a per-team basis\n     * @param {string} [params.privateMetaData] Sets a string sent back to your server together with all action and submission events.\n     * @return {HomeTab} An instance of HomeTab\n     */\n\n    HomeTab: (params) => getInstance(HomeTab, params),\n\n    /**\n     * Creates and returns a Message Surface\n     *\n     * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.channel] The Slack channel ID to which the message is to be sent\n     * @param {string} [params.text] Text to be displayed in the notification on the Message, or in the body, if there are no Blocks available\n     * @param {timestamp} [params.threadTs] Sets the message to be a reply in a thread to the message whose timestamp is passed\n     * @param {timestamp} [params.postAt] Sets a time for the message to be posted, as a scheduled message\n     * @return {Message} An instance of Message\n     */\n\n    Message: (params) => getInstance(Message, params),\n\n    /**\n     * Creates and returns a Modal Surface\n     *\n     * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n     *\n     * @param {Object} [params] Constructor parameters\n     * @param {string} [params.title] Sets a title for your Modal\n     * @param {string} [params.close] Sets the text for the close button\n     * @param {string} [params.submit] Sets the text for the submit button\n     * @param {string} [params.callbackId] Sets a string sent back to your server together with all action and submission events.\n     * @param {string} [params.externalId] Sets a custom identifier that must be unique for all views on a per-team basis\n     * @param {string} [params.privateMetaData] Sets a string sent back to your server together with all action and submission events.\n     * @return {Modal} An instance of Modal\n     */\n\n    Modal: (params) => getInstance(Modal, params),\n  };\n};\n\nmodule.exports = {\n  HomeTab,\n  Message,\n  Modal,\n  SurfaceDto,\n  getSurfaces,\n};\n","const { Surface } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { props, enumValues } = require('../utility/constants');\n\nclass MessageDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.channel = params.channel;\n    this.text = params.text;\n    this.blocks = params.blocks;\n    this.attachments = params.attachments;\n    this.as_user = params.asUser;\n    this.ts = params.ts;\n    this.thread_ts = params.threadTs;\n    this.replace_original = params.replaceOriginal;\n    this.delete_original = params.deleteOriginal;\n    this.response_type = params.responseType;\n    this.post_at = params.postAt;\n    this.mrkdwn = params.mrkdwn;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Message extends Surface {\n  constructor(params = {}) {\n    super();\n\n    this.props.channel = params.channel;\n    this.props.text = params.text;\n    this.props.ts = params.ts;\n    this.props.threadTs = params.threadTs;\n    this.props.postAt = params.postAt;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the Attachments of the Message object\n   *\n   * {@link https://api.slack.com/reference/messaging/attachments|View in Slack API Documentation}\n   *\n   * @param {...Attachment|Array<Attachment>} attachments Accepts multiple arguments or Array\n   * @return {this} The instance on which the method is called\n   */\n\n  attachments(...attachments) {\n    return this.append(attachments.flat(), props.attachments);\n  }\n\n  /**\n   * The Slack channel ID to which the message is to be sent\n   *\n   * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n   *\n   * @param {string} string Slack channel ID\n   * @return {this} The instance on which the method is called\n   */\n\n  channel(string) {\n    return this.set(string, props.channel);\n  }\n\n  /**\n   * Text to be displayed in the notification on the Message, or\n   * in the body, if there are no Blocks available\n   *\n   * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n   *\n   * @param {string} string Slack channel ID\n   * @return {this} The instance on which the method is called\n   */\n\n  text(string) {\n    return this.set(string, props.text);\n  }\n\n  /**\n   * Sets the message to be sent as either the user whose oAuth token is being used,\n   * or as a bot user\n   *\n   * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  asUser() {\n    return this.set(true, props.asUser);\n  }\n\n  /**\n   * Sets the message to be a reply in a thread to the message whose timestamp is passed\n   *\n   * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n   *\n   * @param {string} string The Slack-produced timestamp of message to be replied to\n   * @return {this} The instance on which the method is called\n   */\n\n  threadTs(string) {\n    return this.set(string, props.threadTs);\n  }\n\n  /**\n   * Used to update a message. Sets the timestamp of the message to update.\n   *\n   * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n   *\n   * @param {string} string The Slack-produced timestamp of message to be replaced\n   * @return {this} The instance on which the method is called\n   */\n\n  ts(string) {\n    return this.set(string, props.ts);\n  }\n\n  /**\n   * Sets the message to be replace the original message from which the interaction was received\n   *\n   * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  replaceOriginal() {\n    return this.set(true, props.replaceOriginal);\n  }\n\n  /**\n   * Sets the original message from which interaction was received to be deleted\n   *\n   * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  deleteOriginal() {\n    return this.set(true, props.deleteOriginal);\n  }\n\n  /**\n   * Sets the message to only be visible by the user who invoked the action\n   *\n   * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  ephemeral() {\n    return this.set(enumValues.ephemeral, props.responseType);\n  }\n\n  /**\n   * Sets the message to visible to everyone in the channel\n   *\n   * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  inChannel() {\n    return this.set(enumValues.inChannel, props.responseType);\n  }\n\n  /**\n   * Sets a time for the message to be posted, as a scheduled message\n   *\n   * {@link https://api.slack.com/messaging/composing|View in Slack API Documentation}\n   *\n   * @param {timestamp} timestamp The timestamp of message to be replied to\n   * @return {this} The instance on which the method is called\n   */\n\n  postAt(timestamp) {\n    return this.set(timestamp, props.postAt);\n  }\n\n  /**\n   * When set, the Slack API knows that markdown in the `text` property should be ignored.\n   *\n   * {@link https://api.slack.com/reference/messaging/payload|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  ignoreMarkdown() {\n    return this.set(false, props.mrkdwn);\n  }\n\n  /**\n   * Builds the view and returns a Slack API-compatible array of Attachment objects.\n   *\n   * {@link https://api.slack.com/reference/messaging/attachments|View in Slack API Documentation}\n   *\n   * @return {Array} Array of built Attachment objects\n   */\n\n  getAttachments() {\n    this.build();\n\n    return [...this.result.attachments];\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    if (!this.hasBeenBuilt) {\n      const augmentedProps = {\n        blocks: BuilderHelper.getBuilderResults(this.props.blocks),\n        attachments: BuilderHelper.getBuilderResults(this.props.attachments),\n      };\n\n      this.getResult(MessageDto, augmentedProps);\n    }\n\n    return this.result;\n  }\n}\n\nmodule.exports = {\n  Message,\n  MessageDto,\n};\n","const { AdvancedSurface } = require('./base');\nconst { SlackDto } = require('../utility/lib');\nconst { BuilderHelper } = require('../utility/helpers');\nconst { types, props } = require('../utility/constants');\n\nclass ModalDto extends SlackDto {\n  constructor(params) {\n    super();\n\n    this.type = types.surfaces.modal;\n    this.title = params.title;\n    this.blocks = params.blocks;\n    this.close = params.close;\n    this.submit = params.submit;\n    this.private_metadata = params.privateMetaData;\n    this.callback_id = params.callbackId;\n    this.clear_on_close = params.clearOnClose;\n    this.notify_on_close = params.notifyOnClose;\n    this.external_id = params.externalId;\n\n    this.pruneAndFreeze();\n  }\n}\n\nclass Modal extends AdvancedSurface {\n  constructor(params = {}) {\n    super();\n\n    this.props.title = params.title;\n    this.props.close = params.close;\n    this.props.submit = params.submit;\n    this.props.privateMetaData = params.privateMetaData;\n    this.props.callbackId = params.callbackId;\n    this.props.externalId = params.externalId;\n\n    this.finalizeConstruction();\n  }\n\n  /**\n   * Sets the title of the Modal dialog\n   *\n   * **Slack Validation Rules:**\n   *    * **Required** ⚠\n   *    * Max 24 characters\n   *\n   * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  title(string) {\n    return this.set(string, props.title);\n  }\n\n  /**\n   * Sets the text displayed on the button that closes the Modal\n   *\n   * **Slack Validation Rules:**\n   *    * Max 24 characters\n   *\n   * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  close(string) {\n    return this.set(string, props.close);\n  }\n\n  /**\n   * Sets the text displayed on the button that submits the Modal\n   *\n   * **Slack Validation Rules:**\n   *    * Max 24 characters\n   *\n   * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n   *\n   * @param {string} string\n   * @return {this} The instance on which the method is called\n   */\n\n  submit(string) {\n    return this.set(string, props.submit);\n  }\n\n  /**\n   * Configures the Modal to clear all open and pushed views in the Modal flow\n   *\n   * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  clearOnClose() {\n    return this.set(true, props.clearOnClose);\n  }\n\n  /**\n   * Configures the Modal to send a notification to your server when closed\n   *\n   * {@link https://api.slack.com/reference/surfaces/views|View in Slack API Documentation}\n   *\n   * @return {this} The instance on which the method is called\n   */\n\n  notifyOnClose() {\n    return this.set(true, props.notifyOnClose);\n  }\n\n  /**\n   * @private\n   */\n\n  build() {\n    if (!this.hasBeenBuilt) {\n      const augmentedProps = {\n        title: BuilderHelper.getPlainTextObject(this.props.title),\n        blocks: BuilderHelper.getBuilderResults(this.props.blocks),\n        close: BuilderHelper.getPlainTextObject(this.props.close),\n        submit: BuilderHelper.getPlainTextObject(this.props.submit),\n      };\n\n      this.getResult(ModalDto, augmentedProps);\n    }\n\n    return this.result;\n  }\n}\n\nmodule.exports = {\n  Modal,\n  ModalDto,\n};\n","module.exports = {\n  bit: 'Bit',\n  element: 'Element',\n  block: 'Block',\n  surface: 'Surface',\n};\n","module.exports = {\n  option: 'Option',\n  optionGroup: 'OptionGroup',\n  confirmationDialog: 'ConfirmationDialog',\n  img: 'Img',\n  attachment: 'Attachment',\n};\n","const types = require('./types');\nconst enumValues = require('./values');\nconst props = require('./props');\nconst categories = require('./categories');\nconst classes = require('./classes');\nconst paramMap = require('./param-map');\n\nmodule.exports = {\n  types,\n  enumValues,\n  props,\n  categories,\n  classes,\n  paramMap,\n};\n","module.exports = {\n  actionId: 'action_id',\n  blocks: 'blocks',\n  blockId: 'block_id',\n  maxSelectedItems: 'max_selected_items',\n  title: 'title',\n  text: 'text',\n  confirm: 'confirm',\n  deny: 'deny',\n  style: 'style',\n  danger: 'danger',\n  label: 'label',\n  options: 'options',\n  value: 'value',\n  description: 'description',\n  url: 'url',\n  elements: 'elements',\n  externalId: 'external_id',\n  imageUrl: 'image_url',\n  altText: 'alt_text',\n  element: 'element',\n  hint: 'hint',\n  optional: 'optional',\n  fields: 'fields',\n  accessory: 'accessory',\n  initialChannels: 'initial_channels',\n  initialChannel: 'initial_channel',\n  responseUrlEnabled: 'response_url_enabled',\n  initialOptions: 'initial_options',\n  initialConversations: 'initial_conversations',\n  defaultToCurrentConversation: 'default_to_current_conversation',\n  filter: 'filter',\n  excludeExternalSharedChannels: 'exclude_external_shared_channels',\n  excludeBotUsers: 'exclude_bot_users',\n  initialConversation: 'initial_conversation',\n  initialDate: 'initial_date',\n  minQueryLength: 'min_query_length',\n  initialOption: 'initial_option',\n  optionGroups: 'option_groups',\n  placeholder: 'placeholder',\n  initialValue: 'initial_value',\n  multiline: 'multiline',\n  minLength: 'min_length',\n  maxLength: 'max_length',\n  initialUsers: 'initial_users',\n  initialUser: 'initial_user',\n  channel: 'channel',\n  close: 'close',\n  submit: 'submit',\n  clearOnClose: 'clear_on_close',\n  notifyOnClose: 'notify_on_close',\n  privateMetaData: 'private_metadata',\n  callbackId: 'callback_id',\n  asUser: 'as_user',\n  ts: 'ts',\n  threadTs: 'thread_ts',\n  replaceOriginal: 'replace_original',\n  deleteOriginal: 'delete_original',\n  responseType: 'response_type',\n  postAt: 'post_at',\n  color: 'color',\n  fallback: 'fallback',\n  attachments: 'attachments',\n  dispatchAction: 'dispatch_action',\n  dispatchActionConfig: 'dispatch_action_config',\n  initialTime: 'initial_time',\n  mrkdwn: 'mrkdwn',\n};\n","module.exports = {\n  blocks: 'blocks',\n  elements: 'elements',\n  blockId: 'blockId',\n  externalId: 'externalId',\n  label: 'label',\n  element: 'element',\n  hint: 'hint',\n  optional: 'optional',\n  fields: 'fields',\n  accessory: 'accessory',\n  actionId: 'actionId',\n  url: 'url',\n  style: 'style',\n  value: 'value',\n  option: 'option',\n  confirm: 'confirm',\n  imageUrl: 'imageUrl',\n  altText: 'altText',\n  options: 'options',\n  initialOptions: 'initialOptions',\n  initialOption: 'initialOption',\n  placeholder: 'placeholder',\n  initialDate: 'initialDate',\n  initialValue: 'initialValue',\n  multiline: 'multiline',\n  minLength: 'minLength',\n  maxLength: 'maxLength',\n  initialChannel: 'initialChannel',\n  initialChannels: 'initialChannels',\n  initialConversation: 'initialConversation',\n  initialConversations: 'initialConversations',\n  responseUrlEnabled: 'responseUrlEnabled',\n  defaultToCurrentConversation: 'defaultToCurrentConversation',\n  filter: 'filter',\n  minQueryLength: 'minQueryLength',\n  optionGroups: 'optionGroups',\n  initialUser: 'initialUser',\n  initialUsers: 'initialUsers',\n  maxSelectedItems: 'maxSelectedItems',\n  title: 'title',\n  submit: 'submit',\n  close: 'close',\n  deny: 'deny',\n  excludeExternalSharedChannels: 'excludeExternalSharedChannels',\n  excludeBotUsers: 'excludeBotUsers',\n  text: 'text',\n  privateMetaData: 'privateMetaData',\n  callbackId: 'callbackId',\n  channel: 'channel',\n  clearOnClose: 'clearOnClose',\n  notifyOnClose: 'notifyOnClose',\n  description: 'description',\n  danger: 'danger',\n  primary: 'primary',\n  asUser: 'asUser',\n  threadTs: 'threadTs',\n  replaceOriginal: 'replaceOriginal',\n  deleteOriginal: 'deleteOriginal',\n  responseType: 'responseType',\n  postAt: 'postAt',\n  ephemeral: 'ephemeral',\n  inChannel: 'inChannel',\n  ts: 'ts',\n  color: 'color',\n  fallback: 'fallback',\n  attachments: 'attachments',\n  dispatchAction: 'dispatchAction',\n  dispatchActionConfig: 'dispatchActionConfig',\n  onEnterPressed: 'onEnterPressed',\n  onCharacterEntered: 'onCharacterEntered',\n  dispatchActionOnEnterPressed: 'dispatchActionOnEnterPressed',\n  dispatchActionOnCharacterEntered: 'dispatchActionOnCharacterEntered',\n  initialTime: 'initialTime',\n  mrkdwn: 'mrkdwn',\n  ignoreMarkdown: 'ignoreMarkdown',\n};\n","module.exports = {\n  surfaces: {\n    home: 'home',\n    modal: 'modal',\n  },\n  blocks: {\n    section: 'section',\n    actions: 'actions',\n    context: 'context',\n    input: 'input',\n    file: 'file',\n    divider: 'divider',\n    image: 'image',\n    header: 'header',\n  },\n  elements: {\n    button: 'button',\n    checkbox: 'checkboxes',\n    datepicker: 'datepicker',\n    timepicker: 'timepicker',\n    image: 'image',\n    overflow: 'overflow',\n    input: 'plain_text_input',\n    radiobutton: 'radio_buttons',\n    select: {\n      static: 'static_select',\n      external: 'external_select',\n      users: 'users_select',\n      conversations: 'conversations_select',\n      channels: 'channels_select',\n    },\n    multiselect: {\n      static: 'multi_static_select',\n      external: 'multi_external_select',\n      users: 'multi_users_select',\n      conversations: 'multi_conversations_select',\n      channels: 'multi_channels_select',\n    },\n  },\n  objects: {\n    text: 'plain_text',\n    markdown: 'mrkdwn',\n  },\n};\n","module.exports = {\n  remote: 'remote',\n  danger: 'danger',\n  primary: 'primary',\n  ephemeral: 'ephemeral',\n  inChannel: 'in_channel',\n  onEnterPressed: 'on_enter_pressed',\n  onCharacterEntered: 'on_character_entered',\n};\n","class BlockBuilderError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'BlockBuilderError';\n  }\n}\n\nmodule.exports = BlockBuilderError;\n","class BlockBuilderValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'BlockBuilderValidationError';\n  }\n}\n\nmodule.exports = BlockBuilderValidationError;\n","const BlockBuilderError = require('./block-builder-error');\nconst BlockBuilderValidationError = require('./block-builder-validation-error');\n\nmodule.exports = {\n  BlockBuilderValidationError,\n  BlockBuilderError,\n};\n","const Objects = require('../../objects');\n\nclass BuilderHelper {\n  static getOption(builder, { isMarkdown } = { isMarkdown: false }) {\n    if (this.isUndefined(builder)) {\n      return undefined;\n    }\n\n    if (!builder.hasBeenBuilt) {\n      builder.build({ isMarkdown });\n    }\n\n    return builder.result;\n  }\n\n  static getOptions(builders, { isMarkdown } = { isMarkdown: false }) {\n    if (this.isUndefined(builders)) {\n      return undefined;\n    }\n\n    return builders.map((builder) => this.getBuilderResult(builder, { isMarkdown }));\n  }\n\n  static getBuilderResult(builder, { isMarkdown } = { isMarkdown: false }) {\n    if (this.isUndefined(builder)) {\n      return undefined;\n    }\n\n    if (!builder.hasBeenBuilt) {\n      builder.build({ isMarkdown });\n    }\n\n    return builder.result;\n  }\n\n  static getBuilderResults(builders) {\n    if (this.isUndefined(builders)) {\n      return undefined;\n    }\n\n    return builders.map((builder) => this.getBuilderResult(builder));\n  }\n\n  static getPlainTextObject(string) {\n    if (this.isUndefined(string)) {\n      return undefined;\n    }\n\n    return new Objects.PlainTextObject(string);\n  }\n\n  static getMarkdownObject(string) {\n    if (this.isUndefined(string)) {\n      return undefined;\n    }\n\n    return new Objects.MarkdownObject(string);\n  }\n\n  static getElementsForContext(array) {\n    if (this.isUndefined(array)) {\n      return undefined;\n    }\n\n    return array.map((item) => (typeof item === 'string'\n      ? this.getMarkdownObject(item)\n      : item.build()));\n  }\n\n  static getFields(array) {\n    if (this.isUndefined(array)) {\n      return undefined;\n    }\n\n    return array.map((item) => this.getMarkdownObject(item));\n  }\n\n\n  static getFormattedDate(date) {\n    if (this.isUndefined(date)) {\n      return undefined;\n    }\n\n    return date.toISOString().split('T')[0];\n  }\n\n  static getFilter(props) {\n    const { filter, excludeBotUsers, excludeExternalSharedChannels } = props;\n\n    if (this.areUndefined(filter, excludeBotUsers, excludeExternalSharedChannels)) {\n      return undefined;\n    }\n\n    return new Objects.FilterObject({ filter, excludeBotUsers, excludeExternalSharedChannels });\n  }\n\n  static getDispatchActionsConfigurationObject(props) {\n    const { onEnterPressed, onCharacterEntered } = props;\n\n    if (this.areUndefined(onEnterPressed, onCharacterEntered)) {\n      return undefined;\n    }\n\n    return new Objects.DispatchActionsConfigurationObject({ triggerActionsOn: [onEnterPressed, onCharacterEntered].filter(Boolean) });\n  }\n\n  static isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n\n  static areUndefined(...values) {\n    return values.filter((value) => this.isUndefined(value)).length === values.length;\n  }\n}\n\nmodule.exports = BuilderHelper;\n","const BuilderHelper = require('./builder-helper');\nconst ValidationHelper = require('./validation-helper');\n\nmodule.exports = {\n  BuilderHelper,\n  ValidationHelper,\n};\n","const defaultTypeRules = require('../validators/default-type-rules');\n\nclass ValidationHelper {\n  static getTypeValidator(prop) {\n    return defaultTypeRules[prop];\n  }\n}\n\nmodule.exports = ValidationHelper;\n","const { ValidationHelper } = require('../helpers');\nconst { BlockBuilderError, BlockBuilderValidationError } = require('../exception');\n\nclass Builder {\n  constructor() {\n    this.class = this.constructor.name;\n    this.category = null;\n    this.props = {};\n    this.result = {};\n    this.hasBeenBuilt = false;\n  }\n\n  /**\n   * @protected\n   */\n\n  set(value, prop) {\n    if (typeof this.props[prop] !== 'undefined') {\n      throw new BlockBuilderError(`Property ${prop} for ${this.constructor.name} can only be assigned once.`);\n    }\n\n    this.validateProp(value, prop);\n\n    this.props[prop] = value;\n\n    return this;\n  }\n\n  /**\n   * @protected\n   */\n\n  append(value, prop) {\n    const prunedValue = value.filter(Boolean);\n\n    if (prunedValue.length > 0) {\n      this.validateProp(prunedValue, prop);\n\n      this.props[prop] = typeof this.props[prop] === 'undefined'\n        ? prunedValue\n        : this.props[prop].concat(prunedValue);\n    }\n\n    return this;\n  }\n\n  /**\n   * @protected\n   */\n\n  getResult(Class, augmentedProps) {\n    this.validateState();\n\n    this.result = new Class({ ...this.props, ...augmentedProps });\n    this.hasBeenBuilt = true;\n\n    Object.freeze(this);\n\n    return this.result;\n  }\n\n  /**\n   * @protected\n   */\n\n  finalizeConstruction() {\n    Object.keys(this.props).map((prop) => this.validateProp(this.props[prop], prop));\n    Object.keys(this.props).forEach((prop) => typeof this.props[prop] === 'undefined' && delete this.props[prop]);\n    Object.seal(this);\n  }\n\n  /**\n   * @private\n   */\n\n  validateProp(value, prop) {\n    this.validateState();\n\n    if (typeof value === 'undefined') {\n      return null;\n    }\n\n    const typeValidator = ValidationHelper.getTypeValidator(prop);\n    const typeValidation = typeValidator.validate(value);\n\n    if (typeValidation.failed) {\n      throw new BlockBuilderValidationError(`Property '${prop}' of ${this.constructor.name} only accepts ${typeValidation.message}.`);\n    }\n  }\n\n  /**\n   * @private\n   */\n\n  validateState() {\n    if (this.hasBeenBuilt) {\n      throw new BlockBuilderError(`Builder for ${this.constructor.name} has been built and can no longer be modified.`);\n    }\n  }\n\n  /**\n   * Should not be called directly\n   * @protected\n   */\n\n  build() {\n    throw new BlockBuilderError(`Builder ${this.constructor.name} must have a declared 'build' method`);\n  }\n}\n\nmodule.exports = Builder;\n","const Builder = require('./builder');\nconst SlackDto = require('./slack-dto');\nconst Validator = require('./validator');\n\nmodule.exports = {\n  Builder,\n  SlackDto,\n  Validator,\n};\n","class SlackDto {\n  /**\n   * @protected\n   */\n\n  pruneAndFreeze() {\n    Object.keys(this)\n      .forEach((prop) => typeof this[prop] === 'undefined' && delete this[prop]);\n\n    Object.freeze(this);\n  }\n}\n\nmodule.exports = SlackDto;\n","class Validator {\n  constructor({ condition, message }) {\n    this.condition = condition;\n    this.message = message;\n  }\n\n  validate(value) {\n    return {\n      failed: !this.condition(value),\n      message: this.message,\n    };\n  }\n}\n\nmodule.exports = Validator;\n","const types = require('./type-validators');\n\nmodule.exports = {\n  blocks: types.areBlocks,\n  elements: types.areElementsOrStrings,\n  blockId: types.isString,\n  externalId: types.isString,\n  label: types.isString,\n  element: types.isElement,\n  hint: types.isString,\n  optional: types.isBool,\n  fields: types.areStringsOrImages,\n  accessory: types.isElement,\n  actionId: types.isString,\n  url: types.isString,\n  style: types.isButtonStyleEnum,\n  primary: types.isButtonStyleEnum,\n  danger: types.isButtonStyleEnum,\n  value: types.isString,\n  option: types.isOption,\n  confirm: types.isConfirmationDialogOrString,\n  imageUrl: types.isString,\n  altText: types.isString,\n  options: types.areOptions,\n  initialOptions: types.areOptions,\n  initialOption: types.isOption,\n  placeholder: types.isString,\n  initialDate: types.isDate,\n  initialValue: types.isString,\n  multiline: types.isBool,\n  minLength: types.isInt,\n  maxLength: types.isInt,\n  initialChannel: types.isString,\n  initialChannels: types.areStrings,\n  initialConversation: types.isString,\n  initialConversations: types.areStrings,\n  responseUrlEnabled: types.isBool,\n  defaultToCurrentConversation: types.isBool,\n  filter: types.areStrings,\n  minQueryLength: types.isInt,\n  optionGroups: types.areOptionGroups,\n  initialUser: types.isString,\n  initialUsers: types.areStrings,\n  maxSelectedItems: types.isInt,\n  title: types.isString,\n  submit: types.isString,\n  close: types.isString,\n  deny: types.isString,\n  excludeExternalSharedChannels: types.isBool,\n  excludeBotUsers: types.isBool,\n  text: types.isString,\n  privateMetaData: types.isString,\n  callbackId: types.isString,\n  channel: types.isString,\n  clearOnClose: types.isBool,\n  notifyOnClose: types.isBool,\n  description: types.isString,\n  asUser: types.isBool,\n  ts: types.isString,\n  threadTs: types.isString,\n  replaceOriginal: types.isBool,\n  deleteOriginal: types.isBool,\n  responseType: types.isResponseTypeEnum,\n  postAt: types.isTimestamp,\n  color: types.isString,\n  fallback: types.isString,\n  attachments: types.areAttachments,\n  dispatchAction: types.isBool,\n  onEnterPressed: types.isDispatchConfigEnum,\n  onCharacterEntered: types.isDispatchConfigEnum,\n  initialTime: types.isHhMmTime,\n  mrkdwn: types.isBool,\n};\n","const Validator = require('../lib/validator');\nconst { enumValues, categories, classes } = require('../constants');\n\n\nmodule.exports = {\n  isString: new Validator({\n    condition: (value) => typeof value === 'string',\n    message: 'String',\n  }),\n\n  areStrings: new Validator({\n    condition: (values) => (Array.isArray(values)\n      ? values.filter((value) => typeof value === 'string').length === values.length\n      : false),\n    message: 'Strings',\n  }),\n\n  isInt: new Validator({\n    condition: (value) => Number.isInteger(value),\n    message: 'Integer',\n  }),\n\n  isBool: new Validator({\n    condition: (value) => typeof value === 'boolean',\n    message: 'Boolean',\n  }),\n\n  isDate: new Validator({\n    condition: (value) => value instanceof Date,\n    message: 'instance of Date',\n  }),\n\n  areBlocks: new Validator({\n    condition: (values) => (Array.isArray(values)\n      ? values.filter((value) => value.category === categories.block).length === values.length\n      : false),\n    message: 'instances of Blocks',\n  }),\n\n  isElement: new Validator({\n    condition: (value) => value.category === categories.element,\n    message: 'instance of Element',\n  }),\n\n  areElementsOrStrings: new Validator({\n    condition: (values) => (Array.isArray(values)\n      ? values.filter((value) => (typeof value === 'string' || value.category === categories.element)).length === values.length\n      : false),\n    message: 'instances of Elements',\n  }),\n\n  isOption: new Validator({\n    condition: (value) => value.class === classes.option,\n    message: 'instance of Option',\n  }),\n\n  areOptions: new Validator({\n    condition: (values) => (Array.isArray(values)\n      ? values.filter((value) => value.class === classes.option).length === values.length\n      : false),\n    message: 'instances of Option',\n  }),\n\n  areOptionGroups: new Validator({\n    condition: (values) => (Array.isArray(values)\n      ? values.filter((value) => value.class === classes.optionGroup).length === values.length\n      : false),\n    message: 'instances of OptionGroup',\n  }),\n\n  isConfirmationDialogOrString: new Validator({\n    condition: (value) => Boolean(typeof value === 'string' || value.class === classes.confirmationDialog),\n    message: 'instance of ConfirmationDialog',\n  }),\n\n  isButtonStyleEnum: new Validator({\n    condition: (value) => [enumValues.danger, enumValues.primary].includes(value),\n    message: 'String with value \\'danger\\' or \\'primary\\'',\n  }),\n\n  areStringsOrImages: new Validator({\n    condition: (values) => (Array.isArray(values)\n      ? values.filter((value) => Boolean(typeof value === 'string' || value.class === classes.img)).length === values.length\n      : false),\n    message: 'Strings or instances of Img',\n  }),\n\n  isResponseTypeEnum: new Validator({\n    condition: (value) => [enumValues.ephemeral, enumValues.inChannel].includes(value),\n    message: 'String with value of \\'ephemeral\\'',\n  }),\n\n  isTimestamp: new Validator({\n    condition: (value) => new Date(value).getTime() > 0,\n    message: 'UNIX timestamp',\n  }),\n\n  areAttachments: new Validator({\n    condition: (values) => (Array.isArray(values)\n      ? values.filter((value) => value.class === classes.attachment).length === values.length\n      : false),\n    message: 'instances of Attachment',\n  }),\n\n  isDispatchConfigEnum: new Validator({\n    condition: (value) => [enumValues.onEnterPressed, enumValues.onCharacterEntered].includes(value),\n    message: 'String with value \\'on_enter_pressed\\' or \\'on_character_entered\\'',\n  }),\n\n  isHhMmTime: new Validator({\n    condition: (value) => new RegExp('([0-2][0-9]:[0-9][0-9])').test(value),\n    message: 'String in the \\'HH:mm\\' format, where \\'HH\\' is the 24-hour format of an hour, and \\'mm\\' is minutes with leading zero',\n  }),\n};\n","module.exports = require(\"fs\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n__webpack_require__.ab = __dirname + \"/\";","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(3109);\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;ACxnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACxjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AClvtnhhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACxhvtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACnlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChzxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACvpxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACrrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;AChnHA;AACA;A;;;;;;ACDA;AACA;A;;;;;;ACDA;AACA;A;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;ACDA;AACA;AACA;AACA;;A","sourceRoot":""}